import{_ as i,c as t,o as l,a4 as a}from"./chunks/framework.DQ3SZeUm.js";const n="/blog/assets/Nginx%E4%BB%A3%E7%90%86.8o7GDFu9.png",s="/blog/assets/Nginx%E4%BB%A3%E7%90%86%E4%BA%8C.BYFjYZda.png",N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"md/classical/cors/Nginx跨域访问.md","filePath":"md/classical/cors/Nginx跨域访问.md","lastUpdated":1725291312000}'),o={name:"md/classical/cors/Nginx跨域访问.md"},e=a('<h2 id="nginx反向代理配置" tabindex="-1">Nginx反向代理配置 <a class="header-anchor" href="#nginx反向代理配置" aria-label="Permalink to &quot;Nginx反向代理配置&quot;">​</a></h2><p><strong>我们在Nginx中实现跨域访问，可以分成两种情况</strong></p><ul><li>情况一：Nginx代理了静态资源和API服务器</li><li>情况二：Nginx仅仅代理API服务器</li></ul><p><strong>情况一 在这种情况下，Nginx即代理前端静态资源，又代理API请求</strong></p><ul><li>因为静态资源和API请求都是在同一个服务器中，所以其实可以不需要设置跨域访问</li></ul><p><img src="'+n+'" alt="Nginx代理"></p><p><strong>情况二 Nginx仅仅代理API服务器</strong></p><ul><li>这种情况下，前端静态资源由前端服务器直接提供，Nginx仅用于代理API请求</li></ul><p><img src="'+s+'" alt="Nginx代理"></p><h2 id="遇到跨域问题-并解释产生原因" tabindex="-1">遇到跨域问题，并解释产生原因 <a class="header-anchor" href="#遇到跨域问题-并解释产生原因" aria-label="Permalink to &quot;遇到跨域问题，并解释产生原因&quot;">​</a></h2><p><strong>在开发过程中，我们几乎都会遇到跨域请求问题，这主要是因为浏览器的同源策略</strong></p><ul><li>同源策略要求执行脚本的网页的源必须与请求的资源的源相同，否则浏览器会阻止这种请求</li><li>具体来说，同源策略要求协议、端口（如果有指定），和域名完全匹配</li></ul><p><strong>简单例子</strong></p><ul><li>举个例子，如果我们开发过程中，前端项目是部署在 <code>http://localhost:3000</code>（本地开启的服务）</li><li>而后端API部署在 <code>http://api.example.com</code>,由于域名不同，直接从前端向后端发起请求，就会因为不符合同源策略而被浏览器拦截</li></ul><p><strong>在开发过程中我们的解决方案主要有如下几种</strong></p><ul><li>CORS 设置</li><li>在Vite或Webpack中配置</li><li>当然，还有生成环境，我们可以到时候回答Nginx</li></ul>',16),r=[e];function c(g,p,_,d,x,u){return l(),t("div",null,r)}const h=i(o,[["render",c]]);export{N as __pageData,h as default};
