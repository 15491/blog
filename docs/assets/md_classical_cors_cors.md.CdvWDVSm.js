import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.DQ3SZeUm.js";const c=JSON.parse('{"title":"认识跨域访问","description":"","frontmatter":{},"headers":[],"relativePath":"md/classical/cors/cors.md","filePath":"md/classical/cors/cors.md","lastUpdated":1725290669000}'),l={name:"md/classical/cors/cors.md"},n=t(`<h1 id="认识跨域访问" tabindex="-1">认识跨域访问 <a class="header-anchor" href="#认识跨域访问" aria-label="Permalink to &quot;认识跨域访问&quot;">​</a></h1><h2 id="什么是跨域访问" tabindex="-1">什么是跨域访问 <a class="header-anchor" href="#什么是跨域访问" aria-label="Permalink to &quot;什么是跨域访问&quot;">​</a></h2><p><strong>跨域问题通常是由浏览器的同源策略引起的访问问题</strong></p><ul><li>同源策略是浏览器的一个重要的安全机制，它用于限制一个来源的文档或脚本如何能够与另一个来源的资源进行交互</li></ul><p><strong>同源策略的定义：同源策略要求连个url必须满足三个条件</strong></p><ul><li>协议：例如http、https</li><li>域名：www.123.com和api.123.com是不同的主机</li><li>端口：像8080端口和8081端口就是不同的端口</li></ul><p><strong>只有当两个url的协议、主机和端口都相同时，才被认为是同源。否则，浏览器会认为他们是跨域的</strong></p><p><strong>跨域问题的产生和前后端分离的发展密切相关</strong></p><ul><li>在早期，服务器渲染的应用通常不会有跨域问题，因为前端代码和后端api都在同一个服务器上运行</li><li>随着前后端分离的出现，前后端代码和后端api经常部署在不同的服务器上，这就引发了跨域问题</li><li>例如，一个网站的静态资源可能部署在www.123.com上，接口却在api.123.com上</li><li>浏览器在发现静态资源和api不在同一个源时，就会产生跨域问题</li></ul><p><strong>所以，在静态资源服务器和API服务器(其他资源类同)是同一台服务器时，是没有跨域问题的</strong></p><h2 id="如何解决跨域" tabindex="-1">如何解决跨域 <a class="header-anchor" href="#如何解决跨域" aria-label="Permalink to &quot;如何解决跨域&quot;">​</a></h2><p><strong>那么跨域问题如何解决</strong></p><ul><li>所有的跨域解决方案都跟服务器有关系，单独的前端基本解决不了跨域(网上也有一些方案可以，但是基本都不会用)</li></ul><p><strong>解决方案</strong></p><ul><li>将静态资源和API服务器部署在同一个服务器中</li><li>cors，即是指跨域资源共享</li><li>本地方案，webpack或vite提供一个node服务器代理</li><li>Nginx反向代理</li></ul><p><strong>不常见的方案</strong></p><ul><li>jsonp</li><li>postMessage</li><li>webSocket</li></ul><h2 id="cors-跨段资源共享" tabindex="-1">CORS 跨段资源共享 <a class="header-anchor" href="#cors-跨段资源共享" aria-label="Permalink to &quot;CORS 跨段资源共享&quot;">​</a></h2><p><strong>跨源资源贡献（cors）</strong></p><ul><li>他是一种基于http header的机制</li><li>该机制允许服务器标示除了他自己以外的其他源(域，协议，端口)，使得浏览器允许这些 origin 访问加载自己的资源</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Origin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Headers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-type, Authorization, Accept&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><strong>设置解释</strong></p><ul><li>Access-Control-Allow-Origin：允许所有的域名访问，也可以指定特定的域名</li><li>Access-Control-Allow-Methods：允许的HTTP请求方式</li><li>Access-Control-Allow-Headers：允许的HTTP请求头</li></ul><p><strong>限定origin（源）访问</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Origin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://127.0.0.1:3000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>另外我们可以了解一下浏览器机制，关于预请求和实际请求</strong></p><p><strong>预检请求</strong></p><ul><li>对于复杂请求(如果使用 PUT DELETE或自定义头)，浏览器会先发送OPTIONS请求，询问服务器是否允许跨域请求</li><li>服务器如果同意跨域请求，则返回包含CORS头信息的相应</li></ul><p><strong>实际请求</strong></p><ul><li>如果预检请求被允许，浏览器会发送实际请求，并且在请求头中会包含一些CORS的头信息</li><li>服务器在相应中包含CORS头信息，这些信息会被浏览器验证</li></ul><h2 id="预检请求的处理" tabindex="-1">预检请求的处理 <a class="header-anchor" href="#预检请求的处理" aria-label="Permalink to &quot;预检请求的处理&quot;">​</a></h2><p><strong>因为预见请求是一个options的请求，所以我们最好对他进行单独处理</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Origin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Headers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-type, Authorization, Accept&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果是预检请求 则直接返回204</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx.method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;OPTIONS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ctx.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 204</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,33),h=[n];function p(k,e,E,r,o,d){return a(),i("div",null,h)}const y=s(l,[["render",p]]);export{c as __pageData,y as default};
