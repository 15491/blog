import{_ as l,c as t,o as s,a4 as a}from"./chunks/framework.DQ3SZeUm.js";const h=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"md/basics/mysql/数据类型.md","filePath":"md/basics/mysql/数据类型.md","lastUpdated":1726069753000}'),r={name:"md/basics/mysql/数据类型.md"},o=a('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><h2 id="sql的数据类型-数字类型" tabindex="-1">SQL的数据类型-数字类型 <a class="header-anchor" href="#sql的数据类型-数字类型" aria-label="Permalink to &quot;SQL的数据类型-数字类型&quot;">​</a></h2><p><strong>我们知道不同的数据划分为不同数据类型</strong></p><ul><li>MySQL支持的数据类型有：数字类型，日期和时间类型，字符串(字符和字节)类型，空间类型和JSON类型</li></ul><p><strong>数字类型</strong></p><ul><li>整数字类型 INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT</li><li>浮点型 FLOAT、DOUBLE（FLOAT是4个字节，DOUBLE是8个字节）</li><li>精确数字类型：DECIMAL、NUMERIC（DECIMAL是NUMERIC的实现形式）</li></ul><h2 id="sql的数据类型-日期类型" tabindex="-1">SQL的数据类型-日期类型 <a class="header-anchor" href="#sql的数据类型-日期类型" aria-label="Permalink to &quot;SQL的数据类型-日期类型&quot;">​</a></h2><p><strong>YEAR以YYYY的格式显示值</strong></p><ul><li>范围1901-2155，和0000</li></ul><p><strong>DATE类型用于具有日期部分但没有时间部分的值</strong></p><ul><li>DATA以格式YYYY-MM-DD显示值</li><li>支持的范围是1000-01-01到9999-12-31</li></ul><p><strong>DATETIME类型用于包含日期和时间部分的值</strong></p><ul><li>DATETIME类型以格式YYYY-MM-DD hh:mm:ss显示值</li><li>支持的范围是1000-01-01 00:00:00到9999-12-31 23:59:59</li></ul><p><strong>TIMESTAMP类型用于同时包含日期和时间部分的值</strong></p><ul><li>TIMESTAMP以格式YYYY-MM-DD hh:mm:ss显示值</li><li>但是他的范围是UTC的时间范围：1970-01-01 00:00:01 到 2038-01-19 03:14:07</li></ul><p><strong>另外：DATETIME或TIMESTAMP值可以包括在高达微秒(6位)精度的后小鼠秒一部分</strong></p><ul><li>比如DATETIME表示的范围可以是1000-01-01 00:00:00.000000到9999-12-31 23:59:59.999999</li></ul><h2 id="sql的数据类型-字符串类型" tabindex="-1">SQL的数据类型-字符串类型 <a class="header-anchor" href="#sql的数据类型-字符串类型" aria-label="Permalink to &quot;SQL的数据类型-字符串类型&quot;">​</a></h2><p><strong>CHAR类型在创建表时为固定长度，长度可以是0-255之间的任意值</strong></p><ul><li>在被查询的时，会删除后后面的空格</li></ul><p><strong>VARCHAR类型的值是可变长度的字符串，长度可以指定为0-65535之间的值</strong></p><ul><li>在被查询时，不会删除后面的空格</li></ul><p><strong>BINARY和VARBINARY类型用于存储二进制字符串，存储的时字节字符串</strong></p><p><strong>BLOB用于存储大的二进制类型</strong></p><p><strong>TEXT用于存储大的字符串类型</strong></p>',25),i=[o];function e(n,p,T,u,_,c){return s(),t("div",null,i)}const g=l(r,[["render",e]]);export{h as __pageData,g as default};
